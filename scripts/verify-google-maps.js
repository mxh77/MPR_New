#!/usr/bin/env node

/**
 * Script de v√©rification de la configuration Google Maps
 * V√©rifie que tous les fichiers sont correctement configur√©s
 */

const fs = require('fs');
const path = require('path');

console.log('üîç V√©rification de la configuration Google Maps...\n');

let hasErrors = false;

// 1. V√©rification du fichier .env
console.log('üìÅ V√©rification .env');
const envPath = path.join(__dirname, '..', '.env');
if (fs.existsSync(envPath)) {
  const envContent = fs.readFileSync(envPath, 'utf8');
  const apiKeyMatch = envContent.match(/EXPO_PUBLIC_GOOGLE_API_KEY=(.+)/);
  
  if (apiKeyMatch) {
    const apiKey = apiKeyMatch[1].trim();
    if (apiKey === 'YOUR_GOOGLE_MAPS_API_KEY_HERE' || apiKey === 'VOTRE_VRAIE_CLE_API_GOOGLE_ICI') {
      console.log('‚ùå Cl√© API non configur√©e (placeholder d√©tect√©)');
      hasErrors = true;
    } else if (apiKey.length < 30) {
      console.log('‚ö†Ô∏è  Cl√© API suspecte (trop courte)');
      hasErrors = true;
    } else {
      console.log('‚úÖ Cl√© API configur√©e');
    }
  } else {
    console.log('‚ùå Variable EXPO_PUBLIC_GOOGLE_API_KEY non trouv√©e');
    hasErrors = true;
  }
} else {
  console.log('‚ùå Fichier .env non trouv√©');
  hasErrors = true;
}

// 2. V√©rification app.config.js
console.log('\nüìÅ V√©rification app.config.js');
const appConfigPath = path.join(__dirname, '..', 'app.config.js');
if (fs.existsSync(appConfigPath)) {
  const appConfigContent = fs.readFileSync(appConfigPath, 'utf8');
  
  if (appConfigContent.includes('process.env.EXPO_PUBLIC_GOOGLE_API_KEY')) {
    console.log('‚úÖ Configuration Android trouv√©e');
  } else {
    console.log('‚ùå Configuration Android manquante');
    hasErrors = true;
  }
  
  if (appConfigContent.includes('googleMapsApiKey')) {
    console.log('‚úÖ Configuration iOS trouv√©e');
  } else {
    console.log('‚ùå Configuration iOS manquante');
    hasErrors = true;
  }
} else {
  console.log('‚ùå Fichier app.config.js non trouv√©');
  hasErrors = true;
}

// 3. V√©rification AndroidManifest.xml
console.log('\nüìÅ V√©rification AndroidManifest.xml');
const manifestPath = path.join(__dirname, '..', 'android', 'app', 'src', 'main', 'AndroidManifest.xml');
if (fs.existsSync(manifestPath)) {
  const manifestContent = fs.readFileSync(manifestPath, 'utf8');
  
  if (manifestContent.includes('com.google.android.geo.API_KEY')) {
    if (manifestContent.includes('YOUR_GOOGLE_MAPS_API_KEY_HERE')) {
      console.log('‚ùå Placeholder d√©tect√© dans AndroidManifest.xml');
      hasErrors = true;
    } else {
      console.log('‚úÖ Configuration AndroidManifest.xml trouv√©e');
    }
  } else {
    console.log('‚ùå Meta-data Google Maps manquante');
    hasErrors = true;
  }
} else {
  console.log('‚ùå AndroidManifest.xml non trouv√©');
  hasErrors = true;
}

// 4. V√©rification strings.xml
console.log('\nüìÅ V√©rification strings.xml');
const stringsPath = path.join(__dirname, '..', 'android', 'app', 'src', 'main', 'res', 'values', 'strings.xml');
if (fs.existsSync(stringsPath)) {
  const stringsContent = fs.readFileSync(stringsPath, 'utf8');
  
  if (stringsContent.includes('google_maps_api_key')) {
    if (stringsContent.includes('VOTRE_VRAIE_CLE_API_GOOGLE_ICI')) {
      console.log('‚ùå Placeholder d√©tect√© dans strings.xml');
      hasErrors = true;
    } else {
      console.log('‚úÖ Configuration strings.xml trouv√©e');
    }
  } else {
    console.log('‚ùå google_maps_api_key manquante dans strings.xml');
    hasErrors = true;
  }
} else {
  console.log('‚ùå strings.xml non trouv√©');
  hasErrors = true;
}

// 5. V√©rification des composants
console.log('\nüìÅ V√©rification des composants');
const googlePlacesPath = path.join(__dirname, '..', 'src', 'components', 'common', 'GooglePlacesInput.tsx');
if (fs.existsSync(googlePlacesPath)) {
  const googlePlacesContent = fs.readFileSync(googlePlacesPath, 'utf8');
  
  if (googlePlacesContent.includes('ENV.GOOGLE_API_KEY')) {
    console.log('‚úÖ GooglePlacesInput utilise ENV.GOOGLE_API_KEY');
  } else {
    console.log('‚ö†Ô∏è  GooglePlacesInput n\'utilise pas ENV.GOOGLE_API_KEY');
  }
} else {
  console.log('‚ùå GooglePlacesInput.tsx non trouv√©');
}

// R√©sum√©
console.log('\n' + '='.repeat(50));
if (hasErrors) {
  console.log('‚ùå Configuration incompl√®te d√©tect√©e !');
  console.log('\nüìù Actions recommand√©es :');
  console.log('1. Obtenez une cl√© API Google Maps sur https://console.cloud.google.com/');
  console.log('2. Ex√©cutez : node scripts/setup-google-maps.js VOTRE_CLE_API');
  console.log('3. Red√©marrez : npx expo start --clear');
  console.log('4. Reconstruisez l\'APK release');
} else {
  console.log('‚úÖ Configuration compl√®te !');
  console.log('\nüìù Prochaines √©tapes :');
  console.log('1. V√©rifiez que les APIs sont activ√©es dans Google Cloud Console');
  console.log('2. Configurez les restrictions d\'API et d\'application');
  console.log('3. Testez sur un device/√©mulateur');
}
console.log('='.repeat(50));
