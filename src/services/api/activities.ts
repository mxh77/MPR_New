/**
 * Service API pour la gestion des activit√©s
 */
import { AxiosResponse } from 'axios';
import apiClient from './client';

export interface UpdateActivityRequest {
  name?: string;
  type?: 'Randonn√©e' | 'Courses' | 'Visite' | 'Transport' | 'Restaurant' | 'Autre';
  address?: string;
  latitude?: number;
  longitude?: number;
  website?: string | null;
  phone?: string | null;
  email?: string | null;
  startDateTime?: string;
  endDateTime?: string;
  duration?: number | null;
  typeDuration?: 'M' | 'H' | 'J';
  reservationNumber?: string | null;
  price?: number | null;
  currency?: 'USD' | 'CAD' | 'EUR';
  trailDistance?: number | null;
  trailElevation?: number | null;
  trailType?: string | null;
  notes?: string | null;
}

export interface UpdateActivityWithFileRequest extends UpdateActivityRequest {
  thumbnailUri?: string; // URI locale du fichier √† uploader
}

export interface ActivityResponse {
  success: boolean;
  data: any;
  message?: string;
}

/**
 * Met √† jour une activit√© sp√©cifique
 */
export const updateActivity = async (
  activityId: string,
  activityData: UpdateActivityWithFileRequest
): Promise<any> => {
  try {
    console.log('üö∂ updateActivity - D√©but appel API:', {
      activityId,
      activityData: {
        ...activityData,
        thumbnailUri: activityData.thumbnailUri ? 'URI fourni' : 'Pas de thumbnail'
      }
    });

    // PATTERN STEPS: Utiliser le m√™me pattern que les steps et accommodations
    // Extraire l'URI du thumbnail de mani√®re s√©curis√©e
    const { thumbnailUri, ...dataFields } = activityData;
    
    // Si thumbnail est pr√©sent et c'est un URI local, utiliser FormData comme les steps
    if (thumbnailUri && thumbnailUri.startsWith('file://')) {
      console.log('üö∂ updateActivity - Upload avec thumbnail fichier (pattern steps)');
      
      const formData = new FormData();
      
      // Ajouter le fichier thumbnail
      const filename = thumbnailUri.split('/').pop() || 'thumbnail.jpg';
      const fileType = filename.split('.').pop()?.toLowerCase() || 'jpg';
      const mimeType = fileType === 'png' ? 'image/png' : 'image/jpeg';
      
      formData.append('thumbnail', {
        uri: thumbnailUri,
        type: mimeType,
        name: filename,
      } as any);
      
      // Ajouter les autres donn√©es de l'activit√© directement (pattern steps)
      Object.keys(dataFields).forEach(key => {
        const value = dataFields[key as keyof typeof dataFields];
        if (value !== null && value !== undefined) {
          formData.append(key, String(value));
        }
      });
      
      console.log('üö∂ updateActivity - FormData pr√©par√©e (pattern steps):', {
        hasThumnail: true,
        dataFieldsCount: Object.keys(dataFields).length,
        dataFields: Object.keys(dataFields)
      });

      const response: AxiosResponse<any> = await apiClient.put(
        `/activities/${activityId}`,
        formData,
        {
          headers: {
            'Content-Type': 'multipart/form-data',
          },
        }
      );
      
      console.log('‚úÖ updateActivity - Upload avec fichier r√©ussi (pattern steps)');
      return response.data;
      
    } else {
      // Pas de fichier, utilisation JSON classique (pattern steps)
      console.log('üö∂ updateActivity - Mise √† jour JSON classique (pattern steps)');
      
      // Nettoyer les champs null/undefined SAUF pour thumbnail qui doit √™tre trait√© sp√©cialement
      const cleanedData = Object.entries(dataFields).reduce((acc, [key, value]) => {
        if (key === 'thumbnailUri') {
          // Cas sp√©cial pour thumbnail : null/undefined signifie suppression
          if (value === null) {
            acc['removeThumbnail'] = true; // Indiquer √† l'API qu'il faut supprimer le thumbnail
            console.log('üóëÔ∏è updateActivity - Demande de suppression thumbnail');
          } else if (value !== undefined) {
            acc[key] = value; // Thumbnail fourni normalement
          }
          // Si undefined, ne rien faire (pas de changement de thumbnail)
        } else {
          // Pour les autres champs, comportement normal
          if (value !== null && value !== undefined) {
            acc[key] = value;
          }
        }
        return acc;
      }, {} as any);
      
      console.log('üö∂ updateActivity - Donn√©es JSON pr√©par√©es:', {
        dataFieldsCount: Object.keys(cleanedData).length,
        dataFields: Object.keys(cleanedData)
      });

      const response: AxiosResponse<any> = await apiClient.put(
        `/activities/${activityId}`,
        cleanedData
      );
      
      console.log('‚úÖ updateActivity - Mise √† jour JSON r√©ussie (pattern steps)');
      return response.data;
    }

  } catch (error: any) {
    console.error('‚ùå updateActivity - Erreur compl√®te:', {
      message: error.message,
      status: error.response?.status,
      statusText: error.response?.statusText,
      responseData: error.response?.data,
      url: error.config?.url,
      method: error.config?.method,
      activityId,
      errorType: error.code || 'Unknown',
      networkError: error.message === 'Network Error',
      timeoutError: error.code === 'ECONNABORTED'
    });
    
    // Ajouter plus de contexte pour l'erreur
    if (error.message === 'Network Error') {
      console.error('üö® NETWORK ERROR D√âTECT√â - Causes possibles:');
      console.error('  1. Serveur backend inaccessible');
      console.error('  2. Endpoint /activities/{id} non impl√©ment√©');
      console.error('  3. Probl√®me CORS');
      console.error('  4. Timeout de connexion');
      console.error('  5. Probl√®me de format multipart/form-data');
    }
    
    throw error;
  }
};

/**
 * R√©cup√®re une activit√© sp√©cifique
 */
export const getActivity = async (activityId: string): Promise<any> => {
  try {
    console.log('üö∂ getActivity - D√©but appel API:', { activityId });

    const response: AxiosResponse<ActivityResponse> = await apiClient.get(
      `/activities/${activityId}`
    );

    console.log('üö∂ getActivity - R√©ponse API:', {
      status: response.status,
      hasData: !!response.data?.data
    });

    if (response.data && response.data.success) {
      return response.data.data;
    } else {
      throw new Error(response.data?.message || 'Activit√© non trouv√©e');
    }

  } catch (error: any) {
    console.error('‚ùå getActivity - Erreur:', {
      message: error.message,
      status: error.response?.status,
      activityId
    });
    throw error;
  }
};
