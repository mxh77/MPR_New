/**
 * Utilitaires de d√©veloppement pour WatermelonDB
 * ‚ö†Ô∏è √Ä UTILISER UNIQUEMENT EN D√âVELOPPEMENT
 */
import { database } from './index';

/**
 * R√©initialise compl√®tement la base de donn√©es
 * ‚ö†Ô∏è SUPPRIME TOUTES LES DONN√âES !
 */
export const resetDatabase = async (): Promise<void> => {
  if (__DEV__) {
    console.log('üóëÔ∏è R√©initialisation de la base de donn√©es...');
    await database.write(async () => {
      await database.unsafeResetDatabase();
    });
    console.log('‚úÖ Base de donn√©es r√©initialis√©e');
  } else {
    console.warn('‚ö†Ô∏è resetDatabase() ne peut √™tre utilis√© qu\'en d√©veloppement');
  }
};

/**
 * Affiche des statistiques sur la base de donn√©es
 */
export const getDatabaseStats = async (): Promise<void> => {
  if (__DEV__) {
    const roadtrips = await database.get('roadtrips').query().fetchCount();
    const steps = await database.get('steps').query().fetchCount();
    const activities = await database.get('activities').query().fetchCount();
    const accommodations = await database.get('accommodations').query().fetchCount();
    
    console.log('üìä Statistiques base de donn√©es:');
    console.log(`  - Roadtrips: ${roadtrips}`);
    console.log(`  - Steps: ${steps}`);
    console.log(`  - Activities: ${activities}`);
    console.log(`  - Accommodations: ${accommodations}`);
  }
};

/**
 * Vide une table sp√©cifique
 */
export const clearTable = async (tableName: string): Promise<void> => {
  if (__DEV__) {
    console.log(`üóëÔ∏è Vidage de la table ${tableName}...`);
    await database.write(async () => {
      const records = await database.get(tableName).query().fetch();
      await Promise.all(records.map(record => record.destroyPermanently()));
    });
    console.log(`‚úÖ Table ${tableName} vid√©e`);
  } else {
    console.warn('‚ö†Ô∏è clearTable() ne peut √™tre utilis√© qu\'en d√©veloppement');
  }
};
